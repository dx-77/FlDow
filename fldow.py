#!/usr/bin/env python
#
#This file is part of FlDow project
#Copyright (C) 2018 dx-77 <d.x77@yandex.ru>.
#GitHub : https://github.com/dx-77
#
#This program is free software: you can redistribute it and/or modify it under the terms
#of the GNU General Public License as published by the Free Software Foundation,
#either version 3 of the License, or (at your option) any later version.
#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
#without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#See the GNU General Public License for more details.
# 
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import fldow_support
from consts import prgtext, lang

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = FlDow (root)
    fldow_support.init(root, top)
    root.mainloop()

w = None
def create_FlDow(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = FlDow (w)
    fldow_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_FlDow():
    global w
    w.destroy()
    w = None


class FlDow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        wdth = 600
        hght = 371
        x = (top.winfo_screenwidth() - wdth) / 2
        y = (top.winfo_screenheight() - hght) / 2
        top.geometry("%dx%d+%d+%d" % (wdth, hght, x, y))
        top.title("FlDow")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.resizable(width=False, height=False)



        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.file = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label=prgtext['mfile'][lang])
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                command=fldow_support.mnexit,
                font="TkMenuFont",
                foreground="#000000",
                label=prgtext['mexit'][lang])
        self.help = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.help,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label=prgtext['mhelp'][lang])
        self.help.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                command=fldow_support.mnf1,
                font="TkMenuFont",
                foreground="#000000",
                label=prgtext['mf1'][lang])
        self.help.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                command=fldow_support.mnabout,
                font="TkMenuFont",
                foreground="#000000",
                label=prgtext['mabout'][lang])


        self.btnselect = Button(top)
        self.btnselect.place(relx=0.02, rely=0.84, height=52, width=167)
        self.btnselect.configure(activebackground="#d9d9d9")
        self.btnselect.configure(activeforeground="#000000")
        self.btnselect.configure(background="#d9d9d9")
        self.btnselect.configure(command=fldow_support.btnselect)
        self.btnselect.configure(disabledforeground="#a3a3a3")
        self.btnselect.configure(foreground="#000000")
        self.btnselect.configure(highlightbackground="#d9d9d9")
        self.btnselect.configure(highlightcolor="black")
        self.btnselect.configure(pady="0")
        self.btnselect.configure(text=prgtext['bselect'][lang])
        self.btnselect.configure(width=167)

        self.slb = ScrolledListBox(top)
        self.slb.place(relx=0.02, rely=0.03, relheight=0.69, relwidth=0.96)
        self.slb.configure(background="white")
        self.slb.configure(disabledforeground="#a3a3a3")
        self.slb.configure(font="TkFixedFont")
        self.slb.configure(foreground="black")
        self.slb.configure(highlightbackground="#d9d9d9")
        self.slb.configure(highlightcolor="#d9d9d9")
        self.slb.configure(selectbackground="#c4c4c4")
        self.slb.configure(selectforeground="green")
        self.slb.configure(width=10)
        self.slb.config(selectmode=SINGLE)

        self.prb = ttk.Progressbar(top)
        self.prb.place(relx=0.02, rely=0.73, relwidth=0.96, relheight=0.0
                , height=32)
        self.prb.configure(length="560", mode="determinate", maximum=100, value=0)

        self.btndownload = Button(top)
        self.btndownload.place(relx=0.37, rely=0.84, height=52, width=167)
        self.btndownload.configure(activebackground="#d9d9d9")
        self.btndownload.configure(activeforeground="#000000")
        self.btndownload.configure(background="#d9d9d9")
        self.btndownload.configure(command=fldow_support.btndownload)
        self.btndownload.configure(disabledforeground="#a3a3a3")
        self.btndownload.configure(foreground="#000000")
        self.btndownload.configure(highlightbackground="#d9d9d9")
        self.btndownload.configure(highlightcolor="black")
        self.btndownload.configure(pady="0")
        self.btndownload.configure(text=prgtext['bdownload'][lang])
        self.btndownload.configure(width=167)

        self.btnquit = Button(top)
        self.btnquit.place(relx=0.7, rely=0.84, height=52, width=167)
        self.btnquit.configure(activebackground="#d9d9d9")
        self.btnquit.configure(activeforeground="#000000")
        self.btnquit.configure(background="#d9d9d9")
        self.btnquit.configure(command=fldow_support.btnquit)
        self.btnquit.configure(disabledforeground="#a3a3a3")
        self.btnquit.configure(foreground="#000000")
        self.btnquit.configure(highlightbackground="#d9d9d9")
        self.btnquit.configure(highlightcolor="black")
        self.btnquit.configure(pady="0")
        self.btnquit.configure(text=prgtext['bquit'][lang])
        self.btnquit.configure(width=167)



# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()